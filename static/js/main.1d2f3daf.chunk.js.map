{"version":3,"sources":["allocatePlayers.js","calculateEfforts.js","utils.js","generateGraphData.js","Table.jsx","Form.jsx","AvgEffortGraph.jsx","EffortDistGraph.jsx","EffortByOutcomeGraph.jsx","App.jsx","generatePlayers.js","generateTableData.js","reportWebVitals.js","index.js"],"names":["allocateOsPlayers","playersInGame","numberOfGames","players","games","randomFunc","randomUniform","Object","keys","length","allocatedOsPlayers","index","key","playerId","Math","round","includes","push","allocateTsPlayers","a","b","getEffortOs","prize","winUtilCoefficient","riskAverCoefficient","iterationNumber","winUtil","sqrt","randomNormal","setEffortsAndWinsOS","totalEfforts","averageEfforts","gameId","hasOwnProperty","call","game","totalEffortsInGame","player","effort","osEfforts","lotteryResult","acc","beforeAdd","osWins","getEffortTsFirst","groupsInGame","playersInGroup","getEffortTsSecond","setEffortsAndWinsTS","gameA","totalEffortsInGameA","playersInGameA","group","totalEffortsInGroup","tsEfforts","tsWins","gameB","totalEffortsInGameB","toFixed2","number","generateAggData","allEfforts","barSize","currentBottomLimit","aggregation","barNumber","count","btm","top","convertToMean","efforts","means","iterationNum","effortsList","effortsMean","mean","useStyles","makeStyles","table","width","marginBottom","tableCell","textAlign","StyledTableCell","withStyles","root","TableCell","DenseTable","data","classes","rows","label","osEq","eqOsS1","osAct","meanOsS1","stdErrOsS1","tsEq","eqTsS1","tsAct","meanTsS1","stdErrTsS1","eqTsS2","meanTsS2","stdErrTsS2","eqOsRevenue","meanOsRevenue","eqTsRevenue","meanTsRevenue","eqOsDissRate","dissRateOs","eqTsDissRate","dissRateTs","createRows","Table","className","size","aria-label","TableHead","TableRow","colSpan","TableBody","map","row","component","scope","name","backgroundColor","marginTop","buttons","display","justifyContent","padding","validationSchema","yup","numberOfPlayersInGame","typeError","integer","min","test","positive","required","initialEndowment","numberOfIterations","highWinUtilityPercent","max","value","this","parent","riskAversionPercent","Form","runSimulation","setDisplayResults","React","useState","showForm","setShowForm","formik","useFormik","initialValues","onSubmit","values","handleSubmit","style","flexDirection","flexWrap","margin","paddingTop","borderRadius","boxShadow","TextField","id","onChange","handleChange","error","touched","Boolean","errors","helperText","Button","variant","type","alignSelf","color","Card","CardContent","Typography","CardActions","onClick","submitForm","resetForm","AvgEffortGraphOS","alignItems","paddingBottom","height","right","left","bottom","dataKey","stroke","strokeWidth","dot","strokeDasharray","iconSize","iconType","wrapperStyle","position","border","domain","dataMax","allowDataOverflow","AvgEffortGraphTS","layout","align","verticalAlign","EffortDistributionGraphOs","vertical","fill","EffortDistributionGraphTs","EffortByOutcomeGraph","header","dataMin","App","displayResults","tableData","setTableData","avgEffortGraphDataOs","setAvgEffortGraphDataOs","avgEffortGraphDataTs","setAvgEffortGraphDataTs","effortDistGraphDataOs","setEffortDistGraphDataOs","effortDistGraphDataTs","setEffortDistGraphDataTs","effortByOutcomeGraphDataTs","setEffortByOutcomeGraphDataTs","parseInt","totalPlayers","totalNumOfPlayers","winUtilPct","riskAverPct","numOfWinUtilPlayers","numOfRiskAverPlayers","winUtilPlayersIds","riskAverPlayersIds","winRandom","riskRandom","randomId","isWinUtil","isRiskAver","generatePlayers","parseFloat","osGames","tsGames","iteration","effortsOsS1Values","effortsTsS1Values","effortsTsS2Values","totalGameRevenueOsValues","totalGameRevenueTsValues","forEach","endsWith","standardDeviation","generateComparisonTableData","avgEffortDataOs","equilibrium","effortsByIteration","generateAvgEffortGraphDataOs","avgEffortDataTs","equilibriumS1","equilibriumS2","effortsByIterationS1","effortsByIterationS2","effortsS1","effortsS2","meanS1","meanS2","generateAvgEffortGraphDataTs","effortDistDataOs","sort","bar","stage1","generateEffortDistributionOs","effortDistDataTs","allEffortsS1","allEffortsS2","aggregationS1","aggregationS2","countS1","countS2","order","stage2","generateEffortDistributionTs","effortByOutcomeData","losersS1Efforts","winnersS1Efforts","losersS2Efforts","winnersS2Efforts","iterationNumbers","isWinner","losersS1Means","losersS2Means","winnersS1Means","winnersS2Means","s1Data","s2Data","winners","losers","generateEffortByOutcomeTs","Divider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d2f3daf.chunk.js","sourcesContent":["import { randomUniform } from \"d3-random\";\n\nexport const allocateOsPlayers = (playersInGame, numberOfGames, players) => {\n  const games = {};\n  const randomFunc = randomUniform(1, Object.keys(players).length);\n  const allocatedOsPlayers = [];\n  for (let index = 1; index <= numberOfGames; index += 1) {\n    const key = `${index}a`;\n    games[key] = [];\n    while (games[key].length < playersInGame) {\n      const playerId = Math.round(randomFunc());\n      if (!allocatedOsPlayers.includes(playerId)) {\n        games[key].push(players[playerId]);\n        allocatedOsPlayers.push(playerId);\n      }\n    }\n  }\n  return games;\n};\n\nexport const allocateTsPlayers = (playersInGame, numberOfGames, players) => {\n  const games = {};\n  const randomFunc = randomUniform(1, Object.keys(players).length);\n  const allocatedOsPlayers = [];\n  for (let index = 1; index <= numberOfGames; index += 1) {\n    games[index] = {};\n    games[index].a = [[], []];\n    games[index].b = [];\n    while (\n      games[index].a[0].length + games[index].a[1].length <\n      playersInGame\n    ) {\n      const playerId = Math.round(randomFunc());\n      if (!allocatedOsPlayers.includes(playerId)) {\n        allocatedOsPlayers.push(playerId);\n        if (games[index].a[0].length <= games[index].a[1].length) {\n          games[index].a[0].push(players[playerId]);\n        } else {\n          games[index].a[1].push(players[playerId]);\n        }\n      }\n    }\n  }\n  return games;\n};\n","import { randomUniform, randomNormal } from \"d3-random\";\n\nconst getEffortOs = (\n  prize,\n  playersInGame,\n  winUtilCoefficient,\n  riskAverCoefficient,\n  iterationNumber\n) => {\n  const netWinUtil = Math.sqrt(prize) * playersInGame;\n  const winUtil =\n    winUtilCoefficient * (netWinUtil * 0.942 ** (iterationNumber - 1));\n  const effort =\n    randomNormal(1, 0.25)() *\n    riskAverCoefficient *\n    (((playersInGame - 1) / playersInGame ** 2) * (prize + winUtil));\n  return effort;\n};\n\nexport const setEffortsAndWinsOS = (\n  games,\n  prize,\n  iterationNumber,\n  totalEfforts,\n  averageEfforts\n) => {\n  for (const gameId in games) {\n    if (Object.hasOwnProperty.call(games, gameId)) {\n      const game = games[gameId];\n      let totalEffortsInGame = 0;\n      for (const player of game) {\n        const effort = getEffortOs(\n          prize,\n          game.length,\n          player.winUtilCoefficient,\n          player.riskAverCoefficient,\n          iterationNumber\n        );\n        player.osEfforts[iterationNumber] = effort;\n        totalEffortsInGame += effort;\n      }\n      averageEfforts[gameId] = totalEffortsInGame / game.length;\n      totalEfforts[gameId] = totalEffortsInGame;\n      const lotteryResult = randomUniform(0, totalEffortsInGame)();\n      let acc = 0;\n      for (const player of game) {\n        const beforeAdd = acc;\n        acc += player.osEfforts[iterationNumber];\n        if (lotteryResult > beforeAdd && lotteryResult <= acc) {\n          player.osWins[iterationNumber] = true;\n        } else {\n          player.osWins[iterationNumber] = false;\n        }\n      }\n    }\n  }\n};\n\nconst getEffortTsFirst = (\n  prize,\n  playersInGame,\n  groupsInGame,\n  winUtilCoefficient,\n  riskAverCoefficient,\n  iterationNumber\n) => {\n  const playersInGroup = playersInGame / groupsInGame;\n  const netWinUtil = Math.sqrt(prize) * (playersInGroup / groupsInGame);\n  const winUtil =\n    winUtilCoefficient * (netWinUtil * 0.942 ** (iterationNumber - 1));\n  const effort =\n    randomNormal(1.4, 0.3)() *\n    riskAverCoefficient *\n    (((playersInGame - groupsInGame) / (playersInGame ** 2 * groupsInGame)) *\n      (prize + winUtil + winUtil * groupsInGame ** 2));\n  return effort;\n};\n\nconst getEffortTsSecond = (\n  prize,\n  playersInGame,\n  groupsInGame,\n  winUtilCoefficient,\n  riskAverCoefficient\n) => {\n  const playersInGroup = playersInGame / groupsInGame;\n  const netWinUtil = Math.sqrt(prize) * (groupsInGame / playersInGroup);\n  const winUtil = winUtilCoefficient * netWinUtil;\n  const effort =\n    randomNormal(1, 0.6)() *\n    riskAverCoefficient *\n    (((groupsInGame - 1) / groupsInGame ** 2) * (prize + winUtil));\n  return effort;\n};\n\nexport const setEffortsAndWinsTS = (\n  games,\n  prize,\n  playersInGame,\n  iterationNumber,\n  totalEfforts,\n  averageEfforts\n) => {\n  for (const gameId in games) {\n    if (Object.hasOwnProperty.call(games, gameId)) {\n      const gameA = games[gameId].a;\n      let totalEffortsInGameA = 0;\n      let playersInGameA = 0;\n      for (const group of gameA) {\n        let totalEffortsInGroup = 0;\n        for (const player of group) {\n          const effort = getEffortTsFirst(\n            prize,\n            playersInGame,\n            gameA.length,\n            player.winUtilCoefficient,\n            player.riskAverCoefficient,\n            iterationNumber\n          );\n          totalEffortsInGroup += effort;\n          player.tsEfforts[iterationNumber] = {};\n          player.tsEfforts[iterationNumber][`${gameId}a`] = effort;\n        }\n        totalEffortsInGameA += totalEffortsInGroup;\n        playersInGameA += group.length;\n        const lotteryResult = randomUniform(0, totalEffortsInGroup)();\n        let acc = 0;\n        for (const player of group) {\n          const beforeAdd = acc;\n          acc += player.tsEfforts[iterationNumber][`${gameId}a`];\n          player.tsWins[iterationNumber] = {};\n          if (lotteryResult > beforeAdd && lotteryResult <= acc) {\n            player.tsWins[iterationNumber][`${gameId}a`] = true;\n            games[gameId].b.push(player);\n          } else {\n            player.tsWins[iterationNumber][`${gameId}a`] = false;\n          }\n        }\n      }\n      averageEfforts[`${gameId}a`] = totalEffortsInGameA / playersInGameA;\n\n      const gameB = games[gameId].b;\n      let totalEffortsInGameB = 0;\n      for (const player of gameB) {\n        const effort = getEffortTsSecond(\n          prize,\n          playersInGame,\n          gameB.length,\n          player.winUtilCoefficient,\n          player.riskAverCoefficient\n        );\n        totalEffortsInGameB += effort;\n        player.tsEfforts[iterationNumber][`${gameId}b`] = effort;\n      }\n      averageEfforts[`${gameId}b`] = totalEffortsInGameB / gameB.length;\n      totalEfforts[gameId] = totalEffortsInGameA + totalEffortsInGameB;\n      const lotteryResult = randomUniform(0, totalEffortsInGameB)();\n      if (gameB[0].tsEfforts[iterationNumber][`${gameId}b`] >= lotteryResult) {\n        gameB[0].tsWins[iterationNumber][`${gameId}b`] = true;\n        gameB[1].tsWins[iterationNumber][`${gameId}b`] = false;\n      } else {\n        gameB[0].tsWins[iterationNumber][`${gameId}b`] = false;\n        gameB[1].tsWins[iterationNumber][`${gameId}b`] = true;\n      }\n    }\n  }\n};\n","export const toFixed2 = (number) => {\n  const result = Math.round(number * 100) / 100;\n  return result;\n};\n","import { mean } from \"simple-statistics\";\nimport { toFixed2 } from \"./utils\";\n\nexport const generateAvgEffortGraphDataOs = (\n  { averageEfforts: { osGames } },\n  equilibrium\n) => {\n  const effortsByIteration = {};\n  Object.values(osGames).forEach((iteration, index) => {\n    for (const gameId in iteration) {\n      if (Object.hasOwnProperty.call(iteration, gameId)) {\n        if (!effortsByIteration[index + 1]) {\n          effortsByIteration[index + 1] = {\n            efforts: [],\n          };\n        }\n        const effort = iteration[gameId];\n        effortsByIteration[index + 1].efforts.push(effort);\n      }\n    }\n  });\n\n  const data = [];\n  for (const iteration in effortsByIteration) {\n    if (Object.hasOwnProperty.call(effortsByIteration, iteration)) {\n      const { efforts } = effortsByIteration[iteration];\n      data.push({\n        iteration: parseInt(iteration, 10),\n        mean: toFixed2(mean(efforts)),\n        equilibrium,\n      });\n    }\n  }\n  return data;\n};\n\nexport const generateAvgEffortGraphDataTs = (\n  { averageEfforts: { tsGames } },\n  equilibriumS1,\n  equilibriumS2\n) => {\n  const effortsByIterationS1 = {};\n  const effortsByIterationS2 = {};\n  Object.values(tsGames).forEach((iteration, index) => {\n    for (const gameId in iteration) {\n      if (Object.hasOwnProperty.call(iteration, gameId)) {\n        if (gameId.endsWith(\"a\")) {\n          if (!effortsByIterationS1[index + 1]) {\n            effortsByIterationS1[index + 1] = {\n              efforts: [],\n            };\n          }\n          const effort = iteration[gameId];\n          effortsByIterationS1[index + 1].efforts.push(effort);\n        } else if (gameId.endsWith(\"b\")) {\n          if (!effortsByIterationS2[index + 1]) {\n            effortsByIterationS2[index + 1] = {\n              efforts: [],\n            };\n          }\n          const effort = iteration[gameId];\n          effortsByIterationS2[index + 1].efforts.push(effort);\n        }\n      }\n    }\n  });\n  const data = [];\n  for (const iteration in effortsByIterationS1) {\n    if (Object.hasOwnProperty.call(effortsByIterationS1, iteration)) {\n      const { efforts: effortsS1 } = effortsByIterationS1[iteration];\n      const { efforts: effortsS2 } = effortsByIterationS2[iteration];\n\n      data.push({\n        iteration: parseInt(iteration, 10),\n        meanS1: toFixed2(mean(effortsS1)),\n        meanS2: toFixed2(mean(effortsS2)),\n        equilibriumS1,\n        equilibriumS2,\n      });\n    }\n  }\n  return data;\n};\n\nconst generateAggData = (allEfforts, prize) => {\n  const barSize = Math.round(prize / 6);\n  let currentBottomLimit = 0;\n  const aggregation = {};\n  let barNumber = 1;\n  for (const effort of allEfforts) {\n    if (!aggregation[barNumber]) {\n      aggregation[barNumber] = {};\n      aggregation[barNumber].count = 0;\n      aggregation[barNumber].btm = currentBottomLimit;\n      aggregation[barNumber].top = barNumber * barSize;\n    }\n    if (effort <= barNumber * barSize) {\n      aggregation[barNumber].count += 1;\n    } else {\n      currentBottomLimit = barNumber * barSize;\n      barNumber += 1;\n    }\n  }\n  return aggregation;\n};\n\nexport const generateEffortDistributionOs = (players, prize) => {\n  let allEfforts = [];\n  for (const player of Object.values(players)) {\n    const { osEfforts } = player;\n    allEfforts.push(...Object.values(osEfforts));\n  }\n  allEfforts = allEfforts.sort((a, b) => a - b);\n  const aggregation = generateAggData(allEfforts, prize);\n\n  const data = [];\n  for (const bar in aggregation) {\n    if (Object.hasOwnProperty.call(aggregation, bar)) {\n      const { count, btm, top } = aggregation[bar];\n      data.push({\n        name: `${btm}-${top}`,\n        stage1: toFixed2(count / allEfforts.length),\n      });\n    }\n  }\n  return data;\n};\n\nexport const generateEffortDistributionTs = (players, prize) => {\n  let allEffortsS1 = [];\n  let allEffortsS2 = [];\n  for (const player of Object.values(players)) {\n    const { tsEfforts } = player;\n    for (const iteration of Object.values(tsEfforts)) {\n      for (const gameId in iteration) {\n        if (Object.hasOwnProperty.call(iteration, gameId)) {\n          const effort = iteration[gameId];\n          if (gameId.endsWith(\"a\")) allEffortsS1.push(effort);\n          else if (gameId.endsWith(\"b\")) allEffortsS2.push(effort);\n        }\n      }\n    }\n  }\n  allEffortsS1 = allEffortsS1.sort((a, b) => a - b);\n  allEffortsS2 = allEffortsS2.sort((a, b) => a - b);\n  const aggregationS1 = generateAggData(allEffortsS1, prize);\n  const aggregationS2 = generateAggData(allEffortsS2, prize);\n\n  const data = [];\n  for (const bar in aggregationS1) {\n    if (Object.hasOwnProperty.call(aggregationS1, bar)) {\n      const { count: countS1, btm, top } = aggregationS1[bar];\n      const countS2 = aggregationS2[bar]?.count;\n      data.push({\n        order: bar,\n        name: `${btm}-${top}`,\n        stage1: toFixed2(countS1 / allEffortsS1.length),\n        stage2: countS2 ? toFixed2(countS2 / allEffortsS2.length) : 0,\n      });\n    }\n  }\n  for (const bar in aggregationS2) {\n    if (Object.hasOwnProperty.call(aggregationS2, bar)) {\n      const { count: countS2, btm, top } = aggregationS2[bar];\n      const countS1 = aggregationS1[bar]?.count;\n      if (!countS1) {\n        data.push({\n          order: bar,\n          name: `${btm}-${top}`,\n          stage1: 0,\n          stage2: toFixed2(countS2 / allEffortsS2.length),\n        });\n      }\n    }\n  }\n  return data;\n};\n\nconst convertToMean = (efforts) => {\n  const means = {};\n  for (const iterationNum in efforts) {\n    if (Object.hasOwnProperty.call(efforts, iterationNum)) {\n      const effortsList = efforts[iterationNum];\n      const effortsMean = mean(effortsList);\n      means[iterationNum] = toFixed2(effortsMean);\n    }\n  }\n  return means;\n};\n\nexport const generateEffortByOutcomeTs = (players) => {\n  const losersS1Efforts = {};\n  const winnersS1Efforts = {};\n  const losersS2Efforts = {};\n  const winnersS2Efforts = {};\n  const iterationNumbers = Object.keys(players[1].tsWins);\n  iterationNumbers.forEach((iterationNum) => {\n    losersS1Efforts[iterationNum] = [];\n    winnersS1Efforts[iterationNum] = [];\n    losersS2Efforts[iterationNum] = [];\n    winnersS2Efforts[iterationNum] = [];\n  });\n  for (const player of Object.values(players)) {\n    const { tsEfforts, tsWins } = player;\n    for (const iterationNum in tsWins) {\n      if (Object.hasOwnProperty.call(tsWins, iterationNum)) {\n        const iteration = tsWins[iterationNum];\n\n        for (const gameId in iteration) {\n          if (Object.hasOwnProperty.call(iteration, gameId)) {\n            const isWinner = iteration[gameId];\n            const effort = tsEfforts[iterationNum][gameId];\n            if (gameId.endsWith(\"a\")) {\n              if (isWinner) winnersS1Efforts[iterationNum].push(effort);\n              else losersS1Efforts[iterationNum].push(effort);\n            } else if (gameId.endsWith(\"b\")) {\n              if (isWinner) winnersS2Efforts[iterationNum].push(effort);\n              else losersS2Efforts[iterationNum].push(effort);\n            }\n          }\n        }\n      }\n    }\n  }\n  const losersS1Means = convertToMean(losersS1Efforts);\n  const losersS2Means = convertToMean(losersS2Efforts);\n  const winnersS1Means = convertToMean(winnersS1Efforts);\n  const winnersS2Means = convertToMean(winnersS2Efforts);\n  const s1Data = [];\n  const s2Data = [];\n  for (const iterationNum of iterationNumbers) {\n    s1Data.push({\n      iterationNum,\n      winners: winnersS1Means[iterationNum],\n      losers: losersS1Means[iterationNum],\n    });\n    s2Data.push({\n      iterationNum,\n      winners: winnersS2Means[iterationNum],\n      losers: losersS2Means[iterationNum],\n    });\n  }\n  return {\n    s1Data,\n    s2Data,\n  };\n};\n","import React from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nconst useStyles = makeStyles({\n  table: {\n    width: 660,\n    marginBottom: 20,\n  },\n  tableCell: {\n    textAlign: \"center\",\n  },\n});\n\nconst StyledTableCell = withStyles(() => ({\n  root: {\n    textAlign: \"center\",\n  },\n}))(TableCell);\n\nconst createRows = (data) => {\n  const rows = [\n    {\n      label: \"Effort in stage 1\",\n      osEq: data.eqOsS1,\n      osAct: `${data.meanOsS1} (${data.stdErrOsS1})`,\n      tsEq: data.eqTsS1,\n      tsAct: `${data.meanTsS1} (${data.stdErrTsS1})`,\n    },\n    {\n      label: \"Effort in stage 2\",\n      osEq: \"-\",\n      osAct: \"-\",\n      tsEq: data.eqTsS2,\n      tsAct: `${data.meanTsS2} (${data.stdErrTsS2})`,\n    },\n    // { label: \"Net payoff\", osEq: 7.5, osAct: \"-\", tsEq: 7.5, tsAct: \"-\" },\n    {\n      label: \"Total revenue\",\n      osEq: data.eqOsRevenue,\n      osAct: data.meanOsRevenue,\n      tsEq: data.eqTsRevenue,\n      tsAct: data.meanTsRevenue,\n    },\n    {\n      label: \"Dissipation rate\",\n      osEq: data.eqOsDissRate,\n      osAct: data.dissRateOs,\n      tsEq: data.eqTsDissRate,\n      tsAct: data.dissRateTs,\n    },\n  ];\n  return rows;\n};\n\nexport default function DenseTable({ data }) {\n  const classes = useStyles();\n  if (!data) return null;\n  const rows = createRows(data);\n  return (\n    <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n      <TableHead>\n        <TableRow>\n          <TableCell>Treatment</TableCell>\n          <StyledTableCell colSpan=\"2\">One stage contest</StyledTableCell>\n          <StyledTableCell colSpan=\"2\">Two stage contest</StyledTableCell>\n        </TableRow>\n        <TableRow>\n          <StyledTableCell />\n          <StyledTableCell>Equilibrium</StyledTableCell>\n          <StyledTableCell>Actual</StyledTableCell>\n          <StyledTableCell>Equilibrium</StyledTableCell>\n          <StyledTableCell>Actual</StyledTableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows.map((row) => (\n          <TableRow key={row.name}>\n            <TableCell component=\"th\" scope=\"row\">\n              {row.label}\n            </TableCell>\n            <StyledTableCell>{row.osEq}</StyledTableCell>\n            <StyledTableCell>{row.osAct}</StyledTableCell>\n            <StyledTableCell>{row.tsEq}</StyledTableCell>\n            <StyledTableCell>{row.tsAct}</StyledTableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n","import React from \"react\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst checkEven = (number) => number % 2 === 0;\nfunction checkHighWinAgainstRiskAver(value) {\n  const { riskAversionPercent } = this.parent;\n  return value <= 100 - riskAversionPercent;\n}\nfunction checkRiskAverAgainstHighWin(value) {\n  const { highWinUtilityPercent } = this.parent;\n  return value <= 100 - highWinUtilityPercent;\n}\nconst useStyles = makeStyles({\n  root: {\n    width: 660,\n    backgroundColor: \"#ccc\",\n    marginTop: 20,\n  },\n  buttons: {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    padding: 0,\n  },\n});\n\nconst validationSchema = yup.object({\n  numberOfPlayersInGame: yup\n    .number()\n    .typeError(\"Must be a number\")\n    .integer(\"Must be an integer\")\n    .min(4, \"Minimum number of players is 4\")\n    .test(\"isEven\", \"Must be an even number\", checkEven)\n    .positive(\"Must be a positive number\")\n    .required(\"This is a required field\"),\n  numberOfGames: yup\n    .number()\n    .typeError(\"Must be a number\")\n    .integer(\"Must be an integer\")\n    .positive(\"Must be a positive number\")\n    .required(\"This is a required field\"),\n  initialEndowment: yup\n    .number()\n    .typeError(\"Must be a number\")\n    .integer(\"Must be an integer\")\n    .positive(\"Must be a positive number\")\n    .required(\"This is a required field\"),\n  prize: yup\n    .number()\n    .typeError(\"Must be a number\")\n    .integer(\"Must be an integer\")\n    .positive(\"Must be a positive number\")\n    .required(\"This is a required field\"),\n  numberOfIterations: yup\n    .number()\n    .typeError(\"Must be a number\")\n    .integer(\"Must be an integer\")\n    .positive(\"Must be a positive number\")\n    .required(\"This is a required field\"),\n  highWinUtilityPercent: yup\n    .number()\n    .typeError(\"Must be a number\")\n    .positive(\"Must be a positive number\")\n    .min(0, \"Minimum is 0\")\n    .max(100, \"Maximum is 100\")\n    .test(\n      \"totalPct\",\n      \"Total of player percentages must be 100\",\n      checkHighWinAgainstRiskAver\n    ),\n  riskAversionPercent: yup\n    .number()\n    .typeError(\"Must be a number\")\n    .positive(\"Must be a positive number\")\n    .min(0, \"Minimum is 0\")\n    .max(100, \"Maximum is 100\")\n    .test(\n      \"totalPct\",\n      \"Total of player percentages must be 100\",\n      checkRiskAverAgainstHighWin\n    ),\n});\n\nexport default function Form({ runSimulation, setDisplayResults }) {\n  const classes = useStyles();\n  const [showForm, setShowForm] = React.useState(true);\n\n  const onSubmit = (values) => {\n    runSimulation(values);\n    setShowForm(false);\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      numberOfPlayersInGame: 0,\n      numberOfGames: 0,\n      initialEndowment: 0,\n      prize: 0,\n      numberOfIterations: 0,\n      highWinUtilityPercent: 0,\n      riskAversionPercent: 0,\n    },\n    validationSchema,\n    onSubmit,\n  });\n\n  const onReset = () => {\n    formik.resetForm();\n    setDisplayResults(false);\n    setShowForm(true);\n  };\n\n  return (\n    <div>\n      {showForm && (\n        <form\n          onSubmit={formik.handleSubmit}\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            flexWrap: \"wrap\",\n            margin: \"30px\",\n            paddingTop: \"30px\",\n            width: \"500px\",\n            borderRadius: \"4px\",\n            boxShadow:\n              \"rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              flexWrap: \"wrap\",\n              justifyContent: \"center\",\n            }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                width: \"400px\",\n                margin: \"0 30px\",\n              }}\n            >\n              <TextField\n                id=\"numberOfPlayersInGame\"\n                name=\"numberOfPlayersInGame\"\n                label=\"Number of players in each contest\"\n                value={formik.values.numberOfPlayersInGame}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.numberOfPlayersInGame &&\n                  Boolean(formik.errors.numberOfPlayersInGame)\n                }\n                helperText={\n                  formik.touched.numberOfPlayersInGame &&\n                  formik.errors.numberOfPlayersInGame\n                }\n              />\n              <TextField\n                id=\"numberOfGames\"\n                name=\"numberOfGames\"\n                label=\"Total number of contests\"\n                value={formik.values.numberOfGames}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.numberOfGames &&\n                  Boolean(formik.errors.numberOfGames)\n                }\n                helperText={\n                  formik.touched.numberOfGames && formik.errors.numberOfGames\n                }\n              />\n              <TextField\n                id=\"initialEndowment\"\n                name=\"initialEndowment\"\n                label=\"Initial endowment for each player\"\n                value={formik.values.initialEndowment}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.initialEndowment &&\n                  Boolean(formik.errors.initialEndowment)\n                }\n                helperText={\n                  formik.touched.initialEndowment &&\n                  formik.errors.initialEndowment\n                }\n              />\n              <TextField\n                id=\"prize\"\n                name=\"prize\"\n                label=\"Prize amount for the winner of the contest\"\n                value={formik.values.prize}\n                onChange={formik.handleChange}\n                error={formik.touched.prize && Boolean(formik.errors.prize)}\n                helperText={formik.touched.prize && formik.errors.prize}\n              />\n              <TextField\n                id=\"numberOfIterations\"\n                name=\"numberOfIterations\"\n                label=\"Number of contests each player will play\"\n                value={formik.values.numberOfIterations}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.numberOfIterations &&\n                  Boolean(formik.errors.numberOfIterations)\n                }\n                helperText={\n                  formik.touched.numberOfIterations &&\n                  formik.errors.numberOfIterations\n                }\n              />\n              <TextField\n                id=\"highWinUtilityPercent\"\n                name=\"highWinUtilityPercent\"\n                label=\"Percentage of players who have high non-monetary utility of winning\"\n                value={formik.values.highWinUtilityPercent}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.highWinUtilityPercent &&\n                  Boolean(formik.errors.highWinUtilityPercent)\n                }\n                helperText={\n                  formik.touched.highWinUtilityPercent &&\n                  formik.errors.highWinUtilityPercent\n                }\n              />\n              <TextField\n                id=\"riskAversionPercent\"\n                name=\"riskAversionPercent\"\n                label=\"Percentage of players who have aversion to risk\"\n                value={formik.values.riskAversionPercent}\n                onChange={formik.handleChange}\n                error={\n                  formik.touched.riskAversionPercent &&\n                  Boolean(formik.errors.riskAversionPercent)\n                }\n                helperText={\n                  formik.touched.riskAversionPercent &&\n                  formik.errors.riskAversionPercent\n                }\n              />\n            </div>\n          </div>\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            style={{\n              alignSelf: \"center\",\n              margin: \"20px 0\",\n              backgroundColor: \"#003f5c\",\n              color: \"#FFF\",\n            }}\n          >\n            Run simulation\n          </Button>\n        </form>\n      )}\n      {!showForm && (\n        <Card className={classes.root}>\n          <CardContent>\n            <Typography variant=\"h5\" component=\"h2\">\n              Simulation parameters\n            </Typography>\n            <Typography variant=\"body2\">\n              <ul>\n                <li>\n                  {`Each game has ${formik.values.numberOfPlayersInGame} players, there are total of ${formik.values.numberOfGames} games being played in parallel.`}\n                </li>\n                <li>\n                  {`Each player will play ${formik.values.numberOfIterations} consecutive games (iterations) of each type.`}\n                </li>\n                <li>\n                  {`In the beginning of each game each player receives ${formik.values.initialEndowment} francs.`}\n                </li>\n                <li>\n                  {`The prize for winning the game is ${formik.values.prize} francs`}\n                </li>\n                <li>\n                  {`${formik.values.highWinUtilityPercent}% of players have high non-monetary utility of winning.`}\n                </li>\n                <li>\n                  {`${formik.values.riskAversionPercent}% of players are risk averse `}\n                </li>\n              </ul>\n            </Typography>\n          </CardContent>\n          <CardActions className={classes.buttons}>\n            <Button\n              variant=\"contained\"\n              type=\"button\"\n              style={{\n                alignSelf: \"center\",\n                margin: \"20px 0\",\n                backgroundColor: \"#003f5c\",\n                color: \"#FFF\",\n              }}\n              onClick={() => formik.submitForm()}\n            >\n              Re-run simulation with same parameters\n            </Button>\n            <Button\n              variant=\"contained\"\n              type=\"button\"\n              style={{\n                alignSelf: \"center\",\n                margin: \"20px 0\",\n                backgroundColor: \"#ef5675\",\n                color: \"#FFF\",\n              }}\n              onClick={onReset}\n            >\n              Reset simulation\n            </Button>\n          </CardActions>\n        </Card>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nexport function AvgEffortGraphOS({ data }) {\n  if (!data) return null;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        paddingBottom: 20,\n      }}\n    >\n      <h2>One stage contest</h2>\n      <LineChart\n        width={450}\n        height={350}\n        data={data}\n        margin={{ top: 20, right: 0, left: 30, bottom: 50 }}\n      >\n        <Line\n          type=\"monotone\"\n          dataKey=\"mean\"\n          stroke=\"#003f5c\"\n          strokeWidth={2}\n          name=\"Stage 1\"\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"equilibrium\"\n          name=\"Stage 1 equilibrium\"\n          stroke=\"#7a5195\"\n          dot={false}\n          strokeWidth={2}\n          strokeDasharray=\"3 3\"\n        />\n        <Legend\n          iconSize={16}\n          iconType=\"square\"\n          wrapperStyle={{\n            position: \"relative\",\n            bottom: 55,\n            border: \"1px black solid\",\n            borderRadius: \"3px\",\n            width: \"fit-content\",\n            left: 134,\n            padding: \"3px\",\n          }}\n        />\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n        <XAxis\n          dataKey=\"iteration\"\n          label={{\n            value: \"Iteration\",\n            position: \"bottom\",\n          }}\n        />\n        <YAxis\n          domain={[0, (dataMax) => Math.round(dataMax + 10)]}\n          label={{ value: \"Effort\", position: \"top\" }}\n          allowDataOverflow\n        />\n        <Tooltip />\n      </LineChart>\n    </div>\n  );\n}\n\nexport function AvgEffortGraphTS({ data }) {\n  if (!data) return null;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        paddingBottom: 20,\n      }}\n    >\n      <h2>Two stage contest</h2>\n      <LineChart\n        width={450}\n        height={350}\n        data={data}\n        margin={{ top: 20, right: 0, left: 30, bottom: 15 }}\n      >\n        <Line\n          name=\"Stage 1\"\n          dataKey=\"meanS1\"\n          type=\"monotone\"\n          stroke=\"#003f5c\"\n          strokeWidth={2}\n        />\n        <Line\n          name=\"Stage 2\"\n          dataKey=\"meanS2\"\n          type=\"monotone\"\n          stroke=\"#ef5675\"\n          strokeWidth={2}\n        />\n        <Line\n          name=\"Stage 1 equilibrium\"\n          dataKey=\"equilibriumS1\"\n          type=\"monotone\"\n          stroke=\"#7a5195\"\n          strokeDasharray=\"3 3\"\n          dot={false}\n          strokeWidth={2}\n        />\n        <Line\n          name=\"Stage 2 equilibrium\"\n          dataKey=\"equilibriumS2\"\n          type=\"monotone\"\n          stroke=\"#ff764a\"\n          strokeDasharray=\"3 3\"\n          dot={false}\n          strokeWidth={2}\n        />\n        <Legend\n          iconSize={16}\n          layout=\"horizontal\"\n          align=\"center\"\n          iconType=\"square\"\n          verticalAlign=\"bottom\"\n          position=\"center\"\n          wrapperStyle={{\n            position: \"relative\",\n            bottom: 60,\n            border: \"1px black solid\",\n            borderRadius: \"3px\",\n            width: 300,\n            left: 134,\n            padding: \"3px\",\n          }}\n        />\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n        <XAxis\n          dataKey=\"iteration\"\n          label={{\n            value: \"Iteration\",\n            position: \"bottom\",\n          }}\n        />\n        <YAxis\n          domain={[0, (dataMax) => Math.round(dataMax + 10)]}\n          label={{ value: \"Effort\", position: \"top\" }}\n          allowDataOverflow\n        />\n        <Tooltip />\n      </LineChart>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nexport function EffortDistributionGraphOs({ data }) {\n  if (!data) return null;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        paddingBottom: 20,\n      }}\n    >\n      <h2>One stage contest</h2>\n      <BarChart\n        width={500}\n        height={300}\n        data={data}\n        margin={{ top: 20, right: 0, left: 30, bottom: 20 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n        <XAxis\n          dataKey=\"name\"\n          label={{\n            value: \"Effort\",\n            position: \"bottom\",\n          }}\n        />\n        <YAxis label={{ value: \"Fraction\", position: \"top\" }} domain={[0, 1]} />\n        <Tooltip />\n        <Legend\n          wrapperStyle={{\n            border: \"1px solid black\",\n            borderRadius: \"3px\",\n            width: \"fit-content\",\n            position: \"relative\",\n            bottom: 27,\n            left: 249,\n            padding: 3,\n          }}\n        />\n        <Bar dataKey=\"stage1\" fill=\"#003f5c\" name=\"Stage 1\" />\n      </BarChart>\n    </div>\n  );\n}\n\nexport function EffortDistributionGraphTs({ data }) {\n  if (!data) return null;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        paddingBottom: 20,\n      }}\n    >\n      <h2>Two stage contest</h2>\n      <BarChart\n        width={500}\n        height={300}\n        data={data}\n        margin={{ top: 20, right: 0, left: 30, bottom: 20 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n        <XAxis\n          dataKey=\"name\"\n          label={{\n            value: \"Effort\",\n            position: \"bottom\",\n          }}\n        />\n        <YAxis label={{ value: \"Fraction\", position: \"top\" }} domain={[0, 1]} />\n        <Tooltip />\n        <Legend\n          wrapperStyle={{\n            border: \"1px solid black\",\n            borderRadius: \"3px\",\n            width: \"fit-content\",\n            position: \"relative\",\n            bottom: 27,\n            left: 212,\n            padding: 3,\n          }}\n        />\n        <Bar dataKey=\"stage1\" fill=\"#003f5c\" name=\"Stage 1\" />\n        <Bar dataKey=\"stage2\" fill=\"#ef5675\" name=\"Stage 2\" />\n      </BarChart>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Legend } from \"recharts\";\n\nexport function EffortByOutcomeGraph({ data, header }) {\n  if (!data) return null;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        paddingBottom: 20,\n      }}\n    >\n      <h2>{header}</h2>\n      <LineChart\n        width={450}\n        height={350}\n        data={data}\n        margin={{ top: 20, right: 0, left: 30, bottom: 50 }}\n      >\n        <Line\n          type=\"monotone\"\n          dataKey=\"winners\"\n          name=\"Winners\"\n          stroke=\"#003f5c\"\n          strokeWidth={2}\n        />\n        <Line\n          type=\"monotone\"\n          strokeWidth={2}\n          dataKey=\"losers\"\n          name=\"Losers\"\n          stroke=\"#ef5675\"\n        />\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n        <XAxis\n          dataKey=\"iterationNum\"\n          label={{\n            value: \"Iteration\",\n            position: \"bottom\",\n          }}\n        />\n        <YAxis\n          domain={[\n            (dataMin) => Math.round(dataMin * 0.7),\n            (dataMax) => Math.round(dataMax * 1.3),\n          ]}\n          label={{ value: \"Effort\", position: \"top\" }}\n          allowDataOverflow\n        />\n        <Legend\n          iconSize={16}\n          iconType=\"square\"\n          wrapperStyle={{\n            position: \"relative\",\n            bottom: 55,\n            border: \"1px black solid\",\n            borderRadius: \"3px\",\n            width: \"fit-content\",\n            left: 183,\n            padding: \"3px\",\n          }}\n        />\n      </LineChart>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { generatePlayers } from \"./generatePlayers\";\nimport { allocateOsPlayers, allocateTsPlayers } from \"./allocatePlayers\";\nimport { setEffortsAndWinsOS, setEffortsAndWinsTS } from \"./calculateEfforts\";\nimport { generateComparisonTableData } from \"./generateTableData\";\nimport {\n  generateAvgEffortGraphDataOs,\n  generateAvgEffortGraphDataTs,\n  generateEffortDistributionOs,\n  generateEffortDistributionTs,\n  generateEffortByOutcomeTs,\n} from \"./generateGraphData\";\nimport Table from \"./Table\";\nimport Form from \"./Form\";\nimport { AvgEffortGraphOS, AvgEffortGraphTS } from \"./AvgEffortGraph\";\nimport {\n  EffortDistributionGraphOs,\n  EffortDistributionGraphTs,\n} from \"./EffortDistGraph\";\nimport { EffortByOutcomeGraph } from \"./EffortByOutcomeGraph\";\nimport \"./App.css\";\n\nfunction App() {\n  const [displayResults, setDisplayResults] = React.useState(false);\n  const [tableData, setTableData] = React.useState(null);\n  const [avgEffortGraphDataOs, setAvgEffortGraphDataOs] = React.useState(null);\n  const [avgEffortGraphDataTs, setAvgEffortGraphDataTs] = React.useState(null);\n  const [effortDistGraphDataOs, setEffortDistGraphDataOs] = React.useState(\n    null\n  );\n  const [effortDistGraphDataTs, setEffortDistGraphDataTs] = React.useState(\n    null\n  );\n  const [\n    effortByOutcomeGraphDataTs,\n    setEffortByOutcomeGraphDataTs,\n  ] = React.useState(null);\n\n  const runSimulation = (values) => {\n    const playersInGame = parseInt(values.numberOfPlayersInGame, 10);\n    const numberOfGames = parseInt(values.numberOfGames, 10);\n    const prize = parseInt(values.prize, 10);\n    const totalPlayers = playersInGame * numberOfGames;\n    const numberOfIterations = parseInt(values.numberOfIterations, 10);\n    const players = generatePlayers(\n      totalPlayers,\n      parseFloat(values.highWinUtilityPercent),\n      parseFloat(values.riskAversionPercent)\n    );\n    const games = {\n      osGames: {},\n      tsGames: {},\n      totalEfforts: {\n        osGames: {},\n        tsGames: {},\n      },\n      averageEfforts: {\n        osGames: {},\n        tsGames: {},\n      },\n    };\n    for (let iteration = 1; iteration <= numberOfIterations; iteration += 1) {\n      games.osGames[iteration] = allocateOsPlayers(\n        playersInGame,\n        numberOfGames,\n        players\n      );\n      games.tsGames[iteration] = allocateTsPlayers(\n        playersInGame,\n        numberOfGames,\n        players\n      );\n      games.totalEfforts.osGames[iteration] = {};\n      games.totalEfforts.tsGames[iteration] = {};\n      games.averageEfforts.osGames[iteration] = {};\n      games.averageEfforts.tsGames[iteration] = {};\n      setEffortsAndWinsOS(\n        games.osGames[iteration],\n        prize,\n        iteration,\n        games.totalEfforts.osGames[iteration],\n        games.averageEfforts.osGames[iteration]\n      );\n      setEffortsAndWinsTS(\n        games.tsGames[iteration],\n        prize,\n        playersInGame,\n        iteration,\n        games.totalEfforts.tsGames[iteration],\n        games.averageEfforts.tsGames[iteration]\n      );\n    }\n    const data = generateComparisonTableData(\n      players,\n      games,\n      prize,\n      playersInGame\n    );\n    setTableData(data);\n    const avgEffortDataOs = generateAvgEffortGraphDataOs(games, data.eqOsS1);\n    setAvgEffortGraphDataOs(avgEffortDataOs);\n    const avgEffortDataTs = generateAvgEffortGraphDataTs(\n      games,\n      data.eqTsS1,\n      data.eqTsS2\n    );\n    setAvgEffortGraphDataTs(avgEffortDataTs);\n    const effortDistDataOs = generateEffortDistributionOs(players, prize);\n    setEffortDistGraphDataOs(effortDistDataOs);\n    const effortDistDataTs = generateEffortDistributionTs(players, prize);\n    setEffortDistGraphDataTs(effortDistDataTs);\n    const effortByOutcomeData = generateEffortByOutcomeTs(players);\n    setEffortByOutcomeGraphDataTs(effortByOutcomeData);\n    setDisplayResults(true);\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"100%\",\n        alignItems: \"center\",\n      }}\n    >\n      <h1>Tullock contests simulator</h1>\n      <h3 style={{ margin: 0 }}>\n        Comparison of two-stage and one-stage contests\n      </h3>\n      <Form\n        runSimulation={runSimulation}\n        setDisplayResults={setDisplayResults}\n      />\n      {displayResults && (\n        <>\n          <h2>Average statistics</h2>\n          <Table data={tableData} />\n          <Divider\n            style={{ color: \"#000\", width: \"100%\", height: \"2px\" }}\n            variant=\"middle\"\n          />\n          <div\n            style={{\n              display: \"flex\",\n              flexWrap: \"wrap\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n            }}\n          >\n            <h2>Average efforts by contest type</h2>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <AvgEffortGraphOS data={avgEffortGraphDataOs} />\n              <AvgEffortGraphTS data={avgEffortGraphDataTs} />\n            </div>\n            <Divider\n              style={{ color: \"#000\", width: \"100%\", height: \"2px\" }}\n              variant=\"middle\"\n            />\n            <h2>Distribution of efforts</h2>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <EffortDistributionGraphOs data={effortDistGraphDataOs} />\n              <EffortDistributionGraphTs data={effortDistGraphDataTs} />\n            </div>\n            <Divider\n              style={{ color: \"#000\", width: \"100%\", height: \"2px\" }}\n              variant=\"middle\"\n            />\n            <h2>The average effort by outcome of stage in two stage contest</h2>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <EffortByOutcomeGraph\n                data={effortByOutcomeGraphDataTs?.s1Data}\n                header=\"Stage 1 effort\"\n              />\n              <EffortByOutcomeGraph\n                data={effortByOutcomeGraphDataTs?.s2Data}\n                header=\"Stage 2 effort\"\n              />\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { randomUniform, randomNormal } from \"d3-random\";\n\nexport const generatePlayers = (totalNumOfPlayers, winUtilPct, riskAverPct) => {\n  const numOfWinUtilPlayers = Math.round(\n    (totalNumOfPlayers * winUtilPct) / 100\n  );\n  const numOfRiskAverPlayers = Math.round(\n    (totalNumOfPlayers * riskAverPct) / 100\n  );\n  const winUtilPlayersIds = [];\n  const riskAverPlayersIds = [];\n  const winRandom = randomUniform(1, totalNumOfPlayers);\n  const riskRandom = randomUniform(1, totalNumOfPlayers);\n  for (\n    let index = 1;\n    winUtilPlayersIds.length < numOfWinUtilPlayers;\n    index += 1\n  ) {\n    const randomId = Math.round(winRandom());\n    if (\n      !winUtilPlayersIds.includes(randomId) &&\n      !riskAverPlayersIds.includes(randomId)\n    )\n      winUtilPlayersIds.push(randomId);\n  }\n  for (\n    let index = 1;\n    riskAverPlayersIds.length < numOfRiskAverPlayers;\n    index += 1\n  ) {\n    const randomId = Math.round(riskRandom());\n    if (\n      !winUtilPlayersIds.includes(randomId) &&\n      !riskAverPlayersIds.includes(randomId)\n    )\n      riskAverPlayersIds.push(randomId);\n  }\n\n  const players = {};\n  for (let playerId = 1; playerId <= totalNumOfPlayers; playerId += 1) {\n    const isWinUtil = winUtilPlayersIds.includes(playerId);\n    const isRiskAver = riskAverPlayersIds.includes(playerId);\n    const winUtilCoefficient = isWinUtil\n      ? randomNormal(2.5, 0.2)()\n      : randomNormal(1, 0.4)();\n    const riskAverCoefficient = isRiskAver\n      ? randomNormal(0.5, 0.2)()\n      : randomNormal(1.5, 0.4)();\n    players[playerId] = {\n      playerId,\n      winUtilCoefficient,\n      riskAverCoefficient,\n      osEfforts: {},\n      tsEfforts: {},\n      osWins: {},\n      tsWins: {},\n    };\n  }\n  return players;\n};\n","import { mean, standardDeviation } from \"simple-statistics\";\nimport { toFixed2 } from \"./utils\";\n\nexport const generateComparisonTableData = (\n  players,\n  games,\n  prize,\n  playersInGame\n) => {\n  const effortsOsS1Values = []; // One stage tournament, stage 1 efforts\n  const effortsTsS1Values = []; // Two stage tournament, stage 1 efforts\n  const effortsTsS2Values = []; // Two stage tournament, stage 2 efforts\n  const totalGameRevenueOsValues = [];\n  const totalGameRevenueTsValues = [];\n  for (const player of Object.values(players)) {\n    const { osEfforts, tsEfforts } = player;\n    effortsOsS1Values.push(...Object.values(osEfforts));\n    Object.values(tsEfforts).forEach((iteration) => {\n      for (const gameId in iteration) {\n        if (Object.hasOwnProperty.call(iteration, gameId)) {\n          const effort = iteration[gameId];\n          if (gameId.endsWith(\"a\")) effortsTsS1Values.push(effort);\n          else effortsTsS2Values.push(effort);\n        }\n      }\n    });\n  }\n  const { osGames, tsGames } = games.totalEfforts;\n  Object.values(osGames).forEach((iteration) => {\n    totalGameRevenueOsValues.push(...Object.values(iteration));\n  });\n  Object.values(tsGames).forEach((iteration) => {\n    totalGameRevenueTsValues.push(...Object.values(iteration));\n  });\n  const meanOsS1 = mean(effortsOsS1Values);\n  const meanTsS1 = mean(effortsTsS1Values);\n  const meanTsS2 = mean(effortsTsS2Values);\n  const stdErrOsS1 =\n    standardDeviation(effortsOsS1Values) / Math.sqrt(effortsOsS1Values.length);\n  const stdErrTsS1 =\n    standardDeviation(effortsTsS1Values) / Math.sqrt(effortsTsS1Values.length);\n  const stdErrTsS2 =\n    standardDeviation(effortsTsS2Values) / Math.sqrt(effortsTsS2Values.length);\n  const meanOsRevenue = mean(totalGameRevenueOsValues);\n  const meanTsRevenue = mean(totalGameRevenueTsValues);\n  const dissRateOs = meanOsRevenue / prize;\n  const dissRateTs = meanTsRevenue / prize;\n  const numberOfGroups = 2;\n  const eqOsS1 = ((playersInGame - 1) / playersInGame ** 2) * prize;\n  const eqTsS1 =\n    ((playersInGame - numberOfGroups) / (playersInGame ** 2 * numberOfGroups)) *\n    prize;\n  const eqTsS2 = ((numberOfGroups - 1) / numberOfGroups ** 2) * prize;\n  const eqOsRevenue = playersInGame * eqOsS1;\n  const eqTsRevenue = playersInGame * eqTsS1 + numberOfGroups * eqTsS2;\n  const eqOsDissRate = eqOsRevenue / prize;\n  const eqTsDissRate = eqTsRevenue / prize;\n  const data = {\n    meanOsS1: toFixed2(meanOsS1),\n    meanTsS1: toFixed2(meanTsS1),\n    meanTsS2: toFixed2(meanTsS2),\n    stdErrOsS1: toFixed2(stdErrOsS1),\n    stdErrTsS1: toFixed2(stdErrTsS1),\n    stdErrTsS2: toFixed2(stdErrTsS2),\n    meanOsRevenue: toFixed2(meanOsRevenue),\n    meanTsRevenue: toFixed2(meanTsRevenue),\n    dissRateOs: toFixed2(dissRateOs),\n    dissRateTs: toFixed2(dissRateTs),\n    eqOsS1: toFixed2(eqOsS1),\n    eqTsS1: toFixed2(eqTsS1),\n    eqTsS2: toFixed2(eqTsS2),\n    eqOsRevenue: toFixed2(eqOsRevenue),\n    eqTsRevenue: toFixed2(eqTsRevenue),\n    eqOsDissRate: toFixed2(eqOsDissRate),\n    eqTsDissRate: toFixed2(eqTsDissRate),\n  };\n  return data;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}